module ExcelCompiler.ExcelParsingTable
let rules = [|["expr";"FUNCTION";"(";"arguments";")"],"Func(s0, List.rev s2)";["expr";"REFERENCE"],"Reference s0";["expr";"NUMBER"],"Number s0";["expr";"QUOTE"],"Quote s0";["expr";"FALSE"],"False";["expr";"TRUE"],"True";["expr";"(";"expr";")"],"s1";["expr";"expr";"=";"expr"],"Eq(s0,s2)";["expr";"expr";"<";"expr"],"Lt(s0,s2)";["expr";"expr";"<=";"expr"],"Le(s0,s2)";["expr";"expr";">";"expr"],"Gt(s0,s2)";["expr";"expr";">=";"expr"],"Ge(s0,s2)";["expr";"expr";"<>";"expr"],"Ne(s0,s2)";["expr";"expr";"&";"expr"],"Concat(s0,s2)";["expr";"expr";"+";"expr"],"Add(s0,s2)";["expr";"expr";"-";"expr"],"Sub(s0,s2)";["expr";"expr";"*";"expr"],"Mul(s0,s2)";["expr";"expr";"/";"expr"],"Div(s0,s2)";["expr";"expr";"^";"expr"],"Pow(s0,s2)";["expr";"expr";"%"],"Percent s0";["expr";"POSITIVE";"expr"],"Positive s1";["expr";"NEGATIVE";"expr"],"Negative s1";["arguments"],"[]";["arguments";"expr"],"[s0]";["arguments";"arguments";",";"expr"],"s2::s0"|]
let actions = [|[|"(",6;"FALSE",9;"FUNCTION",10;"NEGATIVE",13;"NUMBER",15;"POSITIVE",16;"QUOTE",18;"REFERENCE",19;"TRUE",20;"expr",1|];[|"",0;"%",33;"&",34;"*",35;"+",36;"-",37;"/",38;"<",39;"<=",40;"<>",41;"=",42;">",43;">=",44;"^",45|];[|")",12;",",3|];[|"(",6;"FALSE",9;"FUNCTION",10;"NEGATIVE",13;"NUMBER",15;"POSITIVE",16;"QUOTE",18;"REFERENCE",19;"TRUE",20;"expr",4|];[|"%",33;"&",34;")",-2;"*",35;"+",36;",",-2;"-",37;"/",38;"<",39;"<=",40;"<>",41;"=",42;">",43;">=",44;"^",45|];[|"%",33;"&",34;")",-3;"*",35;"+",36;",",-3;"-",37;"/",38;"<",39;"<=",40;"<>",41;"=",42;">",43;">=",44;"^",45|];[|"(",6;"FALSE",9;"FUNCTION",10;"NEGATIVE",13;"NUMBER",15;"POSITIVE",16;"QUOTE",18;"REFERENCE",19;"TRUE",20;"expr",7|];[|"%",33;"&",34;")",8;"*",35;"+",36;"-",37;"/",38;"<",39;"<=",40;"<>",41;"=",42;">",43;">=",44;"^",45|];[|"",-4;"%",-4;"&",-4;")",-4;"*",-4;"+",-4;",",-4;"-",-4;"/",-4;"<",-4;"<=",-4;"<>",-4;"=",-4;">",-4;">=",-4;"^",-4|];[|"",-5;"%",-5;"&",-5;")",-5;"*",-5;"+",-5;",",-5;"-",-5;"/",-5;"<",-5;"<=",-5;"<>",-5;"=",-5;">",-5;">=",-5;"^",-5|];[|"(",11|];[|"(",6;")",-1;",",-1;"FALSE",9;"FUNCTION",10;"NEGATIVE",13;"NUMBER",15;"POSITIVE",16;"QUOTE",18;"REFERENCE",19;"TRUE",20;"arguments",2;"expr",5|];[|"",-6;"%",-6;"&",-6;")",-6;"*",-6;"+",-6;",",-6;"-",-6;"/",-6;"<",-6;"<=",-6;"<>",-6;"=",-6;">",-6;">=",-6;"^",-6|];[|"(",6;"FALSE",9;"FUNCTION",10;"NEGATIVE",13;"NUMBER",15;"POSITIVE",16;"QUOTE",18;"REFERENCE",19;"TRUE",20;"expr",14|];[|"",-7;"%",-7;"&",-7;")",-7;"*",-7;"+",-7;",",-7;"-",-7;"/",-7;"<",-7;"<=",-7;"<>",-7;"=",-7;">",-7;">=",-7;"^",-7|];[|"",-8;"%",-8;"&",-8;")",-8;"*",-8;"+",-8;",",-8;"-",-8;"/",-8;"<",-8;"<=",-8;"<>",-8;"=",-8;">",-8;">=",-8;"^",-8|];[|"(",6;"FALSE",9;"FUNCTION",10;"NEGATIVE",13;"NUMBER",15;"POSITIVE",16;"QUOTE",18;"REFERENCE",19;"TRUE",20;"expr",17|];[|"",-9;"%",-9;"&",-9;")",-9;"*",-9;"+",-9;",",-9;"-",-9;"/",-9;"<",-9;"<=",-9;"<>",-9;"=",-9;">",-9;">=",-9;"^",-9|];[|"",-10;"%",-10;"&",-10;")",-10;"*",-10;"+",-10;",",-10;"-",-10;"/",-10;"<",-10;"<=",-10;"<>",-10;"=",-10;">",-10;">=",-10;"^",-10|];[|"",-11;"%",-11;"&",-11;")",-11;"*",-11;"+",-11;",",-11;"-",-11;"/",-11;"<",-11;"<=",-11;"<>",-11;"=",-11;">",-11;">=",-11;"^",-11|];[|"",-12;"%",-12;"&",-12;")",-12;"*",-12;"+",-12;",",-12;"-",-12;"/",-12;"<",-12;"<=",-12;"<>",-12;"=",-12;">",-12;">=",-12;"^",-12|];[|"",-14;"%",33;"&",-14;")",-14;"*",35;"+",36;",",-14;"-",37;"/",38;"<",-14;"<=",-14;"<>",-14;"=",-14;">",-14;">=",-14;"^",45|];[|"",-15;"%",33;"&",-15;")",-15;"*",-15;"+",-15;",",-15;"-",-15;"/",-15;"<",-15;"<=",-15;"<>",-15;"=",-15;">",-15;">=",-15;"^",45|];[|"",-16;"%",33;"&",-16;")",-16;"*",35;"+",-16;",",-16;"-",-16;"/",38;"<",-16;"<=",-16;"<>",-16;"=",-16;">",-16;">=",-16;"^",45|];[|"",-17;"%",33;"&",-17;")",-17;"*",35;"+",-17;",",-17;"-",-17;"/",38;"<",-17;"<=",-17;"<>",-17;"=",-17;">",-17;">=",-17;"^",45|];[|"",-18;"%",33;"&",-18;")",-18;"*",-18;"+",-18;",",-18;"-",-18;"/",-18;"<",-18;"<=",-18;"<>",-18;"=",-18;">",-18;">=",-18;"^",45|];[|"",-19;"%",33;"&",34;")",-19;"*",35;"+",36;",",-19;"-",37;"/",38;"^",45|];[|"",-20;"%",33;"&",34;")",-20;"*",35;"+",36;",",-20;"-",37;"/",38;"^",45|];[|"",-21;"%",33;"&",34;")",-21;"*",35;"+",36;",",-21;"-",37;"/",38;"^",45|];[|"",-22;"%",33;"&",34;")",-22;"*",35;"+",36;",",-22;"-",37;"/",38;"^",45|];[|"",-23;"%",33;"&",34;")",-23;"*",35;"+",36;",",-23;"-",37;"/",38;"^",45|];[|"",-24;"%",33;"&",34;")",-24;"*",35;"+",36;",",-24;"-",37;"/",38;"^",45|];[|"",-25;"%",33;"&",-25;")",-25;"*",-25;"+",-25;",",-25;"-",-25;"/",-25;"<",-25;"<=",-25;"<>",-25;"=",-25;">",-25;">=",-25;"^",-25|];[|"",-13;"%",-13;"&",-13;")",-13;"*",-13;"+",-13;",",-13;"-",-13;"/",-13;"<",-13;"<=",-13;"<>",-13;"=",-13;">",-13;">=",-13;"^",-13|];[|"(",6;"FALSE",9;"FUNCTION",10;"NEGATIVE",13;"NUMBER",15;"POSITIVE",16;"QUOTE",18;"REFERENCE",19;"TRUE",20;"expr",21|];[|"(",6;"FALSE",9;"FUNCTION",10;"NEGATIVE",13;"NUMBER",15;"POSITIVE",16;"QUOTE",18;"REFERENCE",19;"TRUE",20;"expr",22|];[|"(",6;"FALSE",9;"FUNCTION",10;"NEGATIVE",13;"NUMBER",15;"POSITIVE",16;"QUOTE",18;"REFERENCE",19;"TRUE",20;"expr",23|];[|"(",6;"FALSE",9;"FUNCTION",10;"NEGATIVE",13;"NUMBER",15;"POSITIVE",16;"QUOTE",18;"REFERENCE",19;"TRUE",20;"expr",24|];[|"(",6;"FALSE",9;"FUNCTION",10;"NEGATIVE",13;"NUMBER",15;"POSITIVE",16;"QUOTE",18;"REFERENCE",19;"TRUE",20;"expr",25|];[|"(",6;"FALSE",9;"FUNCTION",10;"NEGATIVE",13;"NUMBER",15;"POSITIVE",16;"QUOTE",18;"REFERENCE",19;"TRUE",20;"expr",26|];[|"(",6;"FALSE",9;"FUNCTION",10;"NEGATIVE",13;"NUMBER",15;"POSITIVE",16;"QUOTE",18;"REFERENCE",19;"TRUE",20;"expr",27|];[|"(",6;"FALSE",9;"FUNCTION",10;"NEGATIVE",13;"NUMBER",15;"POSITIVE",16;"QUOTE",18;"REFERENCE",19;"TRUE",20;"expr",28|];[|"(",6;"FALSE",9;"FUNCTION",10;"NEGATIVE",13;"NUMBER",15;"POSITIVE",16;"QUOTE",18;"REFERENCE",19;"TRUE",20;"expr",29|];[|"(",6;"FALSE",9;"FUNCTION",10;"NEGATIVE",13;"NUMBER",15;"POSITIVE",16;"QUOTE",18;"REFERENCE",19;"TRUE",20;"expr",30|];[|"(",6;"FALSE",9;"FUNCTION",10;"NEGATIVE",13;"NUMBER",15;"POSITIVE",16;"QUOTE",18;"REFERENCE",19;"TRUE",20;"expr",31|];[|"(",6;"FALSE",9;"FUNCTION",10;"NEGATIVE",13;"NUMBER",15;"POSITIVE",16;"QUOTE",18;"REFERENCE",19;"TRUE",20;"expr",32|]|]
let closures = [|[|0,0,[||];-4,0,[||];-5,0,[||];-6,0,[||];-7,0,[||];-8,0,[||];-9,0,[||];-10,0,[||];-11,0,[||];-12,0,[||];-13,0,[||];-14,0,[||];-15,0,[||];-16,0,[||];-17,0,[||];-18,0,[||];-19,0,[||];-20,0,[||];-21,0,[||];-22,0,[||];-23,0,[||];-24,0,[||];-25,0,[||]|];[|0,1,[|""|];-13,1,[||];-14,1,[||];-15,1,[||];-16,1,[||];-17,1,[||];-18,1,[||];-19,1,[||];-20,1,[||];-21,1,[||];-22,1,[||];-23,1,[||];-24,1,[||];-25,1,[||]|];[|-2,1,[||];-6,3,[||]|];[|-2,2,[||];-4,0,[||];-5,0,[||];-6,0,[||];-7,0,[||];-8,0,[||];-9,0,[||];-10,0,[||];-11,0,[||];-12,0,[||];-13,0,[||];-14,0,[||];-15,0,[||];-16,0,[||];-17,0,[||];-18,0,[||];-19,0,[||];-20,0,[||];-21,0,[||];-22,0,[||];-23,0,[||];-24,0,[||];-25,0,[||]|];[|-2,3,[|")";","|];-13,1,[||];-14,1,[||];-15,1,[||];-16,1,[||];-17,1,[||];-18,1,[||];-19,1,[||];-20,1,[||];-21,1,[||];-22,1,[||];-23,1,[||];-24,1,[||];-25,1,[||]|];[|-3,1,[|")";","|];-13,1,[||];-14,1,[||];-15,1,[||];-16,1,[||];-17,1,[||];-18,1,[||];-19,1,[||];-20,1,[||];-21,1,[||];-22,1,[||];-23,1,[||];-24,1,[||];-25,1,[||]|];[|-4,0,[||];-4,1,[||];-5,0,[||];-6,0,[||];-7,0,[||];-8,0,[||];-9,0,[||];-10,0,[||];-11,0,[||];-12,0,[||];-13,0,[||];-14,0,[||];-15,0,[||];-16,0,[||];-17,0,[||];-18,0,[||];-19,0,[||];-20,0,[||];-21,0,[||];-22,0,[||];-23,0,[||];-24,0,[||];-25,0,[||]|];[|-4,2,[||];-13,1,[||];-14,1,[||];-15,1,[||];-16,1,[||];-17,1,[||];-18,1,[||];-19,1,[||];-20,1,[||];-21,1,[||];-22,1,[||];-23,1,[||];-24,1,[||];-25,1,[||]|];[|-4,3,[|"";"%";"&";")";"*";"+";",";"-";"/";"<";"<=";"<>";"=";">";">=";"^"|]|];[|-5,1,[|"";"%";"&";")";"*";"+";",";"-";"/";"<";"<=";"<>";"=";">";">=";"^"|]|];[|-6,1,[||]|];[|-1,0,[|")";","|];-2,0,[||];-3,0,[||];-4,0,[||];-5,0,[||];-6,0,[||];-6,2,[||];-7,0,[||];-8,0,[||];-9,0,[||];-10,0,[||];-11,0,[||];-12,0,[||];-13,0,[||];-14,0,[||];-15,0,[||];-16,0,[||];-17,0,[||];-18,0,[||];-19,0,[||];-20,0,[||];-21,0,[||];-22,0,[||];-23,0,[||];-24,0,[||];-25,0,[||]|];[|-6,4,[|"";"%";"&";")";"*";"+";",";"-";"/";"<";"<=";"<>";"=";">";">=";"^"|]|];[|-4,0,[||];-5,0,[||];-6,0,[||];-7,0,[||];-7,1,[||];-8,0,[||];-9,0,[||];-10,0,[||];-11,0,[||];-12,0,[||];-13,0,[||];-14,0,[||];-15,0,[||];-16,0,[||];-17,0,[||];-18,0,[||];-19,0,[||];-20,0,[||];-21,0,[||];-22,0,[||];-23,0,[||];-24,0,[||];-25,0,[||]|];[|-7,2,[|"";"%";"&";")";"*";"+";",";"-";"/";"<";"<=";"<>";"=";">";">=";"^"|]|];[|-8,1,[|"";"%";"&";")";"*";"+";",";"-";"/";"<";"<=";"<>";"=";">";">=";"^"|]|];[|-4,0,[||];-5,0,[||];-6,0,[||];-7,0,[||];-8,0,[||];-9,0,[||];-9,1,[||];-10,0,[||];-11,0,[||];-12,0,[||];-13,0,[||];-14,0,[||];-15,0,[||];-16,0,[||];-17,0,[||];-18,0,[||];-19,0,[||];-20,0,[||];-21,0,[||];-22,0,[||];-23,0,[||];-24,0,[||];-25,0,[||]|];[|-9,2,[|"";"%";"&";")";"*";"+";",";"-";"/";"<";"<=";"<>";"=";">";">=";"^"|]|];[|-10,1,[|"";"%";"&";")";"*";"+";",";"-";"/";"<";"<=";"<>";"=";">";">=";"^"|]|];[|-11,1,[|"";"%";"&";")";"*";"+";",";"-";"/";"<";"<=";"<>";"=";">";">=";"^"|]|];[|-12,1,[|"";"%";"&";")";"*";"+";",";"-";"/";"<";"<=";"<>";"=";">";">=";"^"|]|];[|-13,1,[||];-14,3,[|"";"&";")";",";"<";"<=";"<>";"=";">";">="|];-15,1,[||];-16,1,[||];-17,1,[||];-18,1,[||];-25,1,[||]|];[|-13,1,[||];-15,3,[|"";"&";")";"*";"+";",";"-";"/";"<";"<=";"<>";"=";">";">="|];-25,1,[||]|];[|-13,1,[||];-15,1,[||];-16,3,[|"";"&";")";"+";",";"-";"<";"<=";"<>";"=";">";">="|];-18,1,[||];-25,1,[||]|];[|-13,1,[||];-15,1,[||];-17,3,[|"";"&";")";"+";",";"-";"<";"<=";"<>";"=";">";">="|];-18,1,[||];-25,1,[||]|];[|-13,1,[||];-18,3,[|"";"&";")";"*";"+";",";"-";"/";"<";"<=";"<>";"=";">";">="|];-25,1,[||]|];[|-13,1,[||];-14,1,[||];-15,1,[||];-16,1,[||];-17,1,[||];-18,1,[||];-19,3,[|"";")";","|];-25,1,[||]|];[|-13,1,[||];-14,1,[||];-15,1,[||];-16,1,[||];-17,1,[||];-18,1,[||];-20,3,[|"";")";","|];-25,1,[||]|];[|-13,1,[||];-14,1,[||];-15,1,[||];-16,1,[||];-17,1,[||];-18,1,[||];-21,3,[|"";")";","|];-25,1,[||]|];[|-13,1,[||];-14,1,[||];-15,1,[||];-16,1,[||];-17,1,[||];-18,1,[||];-22,3,[|"";")";","|];-25,1,[||]|];[|-13,1,[||];-14,1,[||];-15,1,[||];-16,1,[||];-17,1,[||];-18,1,[||];-23,3,[|"";")";","|];-25,1,[||]|];[|-13,1,[||];-14,1,[||];-15,1,[||];-16,1,[||];-17,1,[||];-18,1,[||];-24,3,[|"";")";","|];-25,1,[||]|];[|-13,1,[||];-25,3,[|"";"&";")";"*";"+";",";"-";"/";"<";"<=";"<>";"=";">";">=";"^"|]|];[|-13,2,[|"";"%";"&";")";"*";"+";",";"-";"/";"<";"<=";"<>";"=";">";">=";"^"|]|];[|-4,0,[||];-5,0,[||];-6,0,[||];-7,0,[||];-8,0,[||];-9,0,[||];-10,0,[||];-11,0,[||];-12,0,[||];-13,0,[||];-14,0,[||];-14,2,[||];-15,0,[||];-16,0,[||];-17,0,[||];-18,0,[||];-19,0,[||];-20,0,[||];-21,0,[||];-22,0,[||];-23,0,[||];-24,0,[||];-25,0,[||]|];[|-4,0,[||];-5,0,[||];-6,0,[||];-7,0,[||];-8,0,[||];-9,0,[||];-10,0,[||];-11,0,[||];-12,0,[||];-13,0,[||];-14,0,[||];-15,0,[||];-15,2,[||];-16,0,[||];-17,0,[||];-18,0,[||];-19,0,[||];-20,0,[||];-21,0,[||];-22,0,[||];-23,0,[||];-24,0,[||];-25,0,[||]|];[|-4,0,[||];-5,0,[||];-6,0,[||];-7,0,[||];-8,0,[||];-9,0,[||];-10,0,[||];-11,0,[||];-12,0,[||];-13,0,[||];-14,0,[||];-15,0,[||];-16,0,[||];-16,2,[||];-17,0,[||];-18,0,[||];-19,0,[||];-20,0,[||];-21,0,[||];-22,0,[||];-23,0,[||];-24,0,[||];-25,0,[||]|];[|-4,0,[||];-5,0,[||];-6,0,[||];-7,0,[||];-8,0,[||];-9,0,[||];-10,0,[||];-11,0,[||];-12,0,[||];-13,0,[||];-14,0,[||];-15,0,[||];-16,0,[||];-17,0,[||];-17,2,[||];-18,0,[||];-19,0,[||];-20,0,[||];-21,0,[||];-22,0,[||];-23,0,[||];-24,0,[||];-25,0,[||]|];[|-4,0,[||];-5,0,[||];-6,0,[||];-7,0,[||];-8,0,[||];-9,0,[||];-10,0,[||];-11,0,[||];-12,0,[||];-13,0,[||];-14,0,[||];-15,0,[||];-16,0,[||];-17,0,[||];-18,0,[||];-18,2,[||];-19,0,[||];-20,0,[||];-21,0,[||];-22,0,[||];-23,0,[||];-24,0,[||];-25,0,[||]|];[|-4,0,[||];-5,0,[||];-6,0,[||];-7,0,[||];-8,0,[||];-9,0,[||];-10,0,[||];-11,0,[||];-12,0,[||];-13,0,[||];-14,0,[||];-15,0,[||];-16,0,[||];-17,0,[||];-18,0,[||];-19,0,[||];-19,2,[||];-20,0,[||];-21,0,[||];-22,0,[||];-23,0,[||];-24,0,[||];-25,0,[||]|];[|-4,0,[||];-5,0,[||];-6,0,[||];-7,0,[||];-8,0,[||];-9,0,[||];-10,0,[||];-11,0,[||];-12,0,[||];-13,0,[||];-14,0,[||];-15,0,[||];-16,0,[||];-17,0,[||];-18,0,[||];-19,0,[||];-20,0,[||];-20,2,[||];-21,0,[||];-22,0,[||];-23,0,[||];-24,0,[||];-25,0,[||]|];[|-4,0,[||];-5,0,[||];-6,0,[||];-7,0,[||];-8,0,[||];-9,0,[||];-10,0,[||];-11,0,[||];-12,0,[||];-13,0,[||];-14,0,[||];-15,0,[||];-16,0,[||];-17,0,[||];-18,0,[||];-19,0,[||];-20,0,[||];-21,0,[||];-21,2,[||];-22,0,[||];-23,0,[||];-24,0,[||];-25,0,[||]|];[|-4,0,[||];-5,0,[||];-6,0,[||];-7,0,[||];-8,0,[||];-9,0,[||];-10,0,[||];-11,0,[||];-12,0,[||];-13,0,[||];-14,0,[||];-15,0,[||];-16,0,[||];-17,0,[||];-18,0,[||];-19,0,[||];-20,0,[||];-21,0,[||];-22,0,[||];-22,2,[||];-23,0,[||];-24,0,[||];-25,0,[||]|];[|-4,0,[||];-5,0,[||];-6,0,[||];-7,0,[||];-8,0,[||];-9,0,[||];-10,0,[||];-11,0,[||];-12,0,[||];-13,0,[||];-14,0,[||];-15,0,[||];-16,0,[||];-17,0,[||];-18,0,[||];-19,0,[||];-20,0,[||];-21,0,[||];-22,0,[||];-23,0,[||];-23,2,[||];-24,0,[||];-25,0,[||]|];[|-4,0,[||];-5,0,[||];-6,0,[||];-7,0,[||];-8,0,[||];-9,0,[||];-10,0,[||];-11,0,[||];-12,0,[||];-13,0,[||];-14,0,[||];-15,0,[||];-16,0,[||];-17,0,[||];-18,0,[||];-19,0,[||];-20,0,[||];-21,0,[||];-22,0,[||];-23,0,[||];-24,0,[||];-24,2,[||];-25,0,[||]|];[|-4,0,[||];-5,0,[||];-6,0,[||];-7,0,[||];-8,0,[||];-9,0,[||];-10,0,[||];-11,0,[||];-12,0,[||];-13,0,[||];-14,0,[||];-15,0,[||];-16,0,[||];-17,0,[||];-18,0,[||];-19,0,[||];-20,0,[||];-21,0,[||];-22,0,[||];-23,0,[||];-24,0,[||];-25,0,[||];-25,2,[||]|]|]
let header = "open ExcelCompiler.ExcelTokenUtils"
let declarations = [|"expr","ExcelExpr";"FUNCTION","string";"NUMBER","string";"QUOTE","string";"REFERENCE","string list*string list";"arguments","ExcelExpr list"|]
open ExcelCompiler.ExcelTokenUtils
let fxRules:(string list*(obj[]->obj))[] = [|
    ["expr";"FUNCTION";"(";"arguments";")"],fun (ss:obj[]) ->
            let s0 = unbox<string> ss.[0]
            let s2 = unbox<ExcelExpr list> ss.[2]
            let result:ExcelExpr =
                Func(s0, List.rev s2)
            box result
    ["expr";"REFERENCE"],fun (ss:obj[]) ->
            let s0 = unbox<string list*string list> ss.[0]
            let result:ExcelExpr =
                Reference s0
            box result
    ["expr";"NUMBER"],fun (ss:obj[]) ->
            let s0 = unbox<string> ss.[0]
            let result:ExcelExpr =
                Number s0
            box result
    ["expr";"QUOTE"],fun (ss:obj[]) ->
            let s0 = unbox<string> ss.[0]
            let result:ExcelExpr =
                Quote s0
            box result
    ["expr";"FALSE"],fun (ss:obj[]) ->
            let result:ExcelExpr =
                False
            box result
    ["expr";"TRUE"],fun (ss:obj[]) ->
            let result:ExcelExpr =
                True
            box result
    ["expr";"(";"expr";")"],fun (ss:obj[]) ->
            let s1 = unbox<ExcelExpr> ss.[1]
            let result:ExcelExpr =
                s1
            box result
    ["expr";"expr";"=";"expr"],fun (ss:obj[]) ->
            let s0 = unbox<ExcelExpr> ss.[0]
            let s2 = unbox<ExcelExpr> ss.[2]
            let result:ExcelExpr =
                Eq(s0,s2)
            box result
    ["expr";"expr";"<";"expr"],fun (ss:obj[]) ->
            let s0 = unbox<ExcelExpr> ss.[0]
            let s2 = unbox<ExcelExpr> ss.[2]
            let result:ExcelExpr =
                Lt(s0,s2)
            box result
    ["expr";"expr";"<=";"expr"],fun (ss:obj[]) ->
            let s0 = unbox<ExcelExpr> ss.[0]
            let s2 = unbox<ExcelExpr> ss.[2]
            let result:ExcelExpr =
                Le(s0,s2)
            box result
    ["expr";"expr";">";"expr"],fun (ss:obj[]) ->
            let s0 = unbox<ExcelExpr> ss.[0]
            let s2 = unbox<ExcelExpr> ss.[2]
            let result:ExcelExpr =
                Gt(s0,s2)
            box result
    ["expr";"expr";">=";"expr"],fun (ss:obj[]) ->
            let s0 = unbox<ExcelExpr> ss.[0]
            let s2 = unbox<ExcelExpr> ss.[2]
            let result:ExcelExpr =
                Ge(s0,s2)
            box result
    ["expr";"expr";"<>";"expr"],fun (ss:obj[]) ->
            let s0 = unbox<ExcelExpr> ss.[0]
            let s2 = unbox<ExcelExpr> ss.[2]
            let result:ExcelExpr =
                Ne(s0,s2)
            box result
    ["expr";"expr";"&";"expr"],fun (ss:obj[]) ->
            let s0 = unbox<ExcelExpr> ss.[0]
            let s2 = unbox<ExcelExpr> ss.[2]
            let result:ExcelExpr =
                Concat(s0,s2)
            box result
    ["expr";"expr";"+";"expr"],fun (ss:obj[]) ->
            let s0 = unbox<ExcelExpr> ss.[0]
            let s2 = unbox<ExcelExpr> ss.[2]
            let result:ExcelExpr =
                Add(s0,s2)
            box result
    ["expr";"expr";"-";"expr"],fun (ss:obj[]) ->
            let s0 = unbox<ExcelExpr> ss.[0]
            let s2 = unbox<ExcelExpr> ss.[2]
            let result:ExcelExpr =
                Sub(s0,s2)
            box result
    ["expr";"expr";"*";"expr"],fun (ss:obj[]) ->
            let s0 = unbox<ExcelExpr> ss.[0]
            let s2 = unbox<ExcelExpr> ss.[2]
            let result:ExcelExpr =
                Mul(s0,s2)
            box result
    ["expr";"expr";"/";"expr"],fun (ss:obj[]) ->
            let s0 = unbox<ExcelExpr> ss.[0]
            let s2 = unbox<ExcelExpr> ss.[2]
            let result:ExcelExpr =
                Div(s0,s2)
            box result
    ["expr";"expr";"^";"expr"],fun (ss:obj[]) ->
            let s0 = unbox<ExcelExpr> ss.[0]
            let s2 = unbox<ExcelExpr> ss.[2]
            let result:ExcelExpr =
                Pow(s0,s2)
            box result
    ["expr";"expr";"%"],fun (ss:obj[]) ->
            let s0 = unbox<ExcelExpr> ss.[0]
            let result:ExcelExpr =
                Percent s0
            box result
    ["expr";"POSITIVE";"expr"],fun (ss:obj[]) ->
            let s1 = unbox<ExcelExpr> ss.[1]
            let result:ExcelExpr =
                Positive s1
            box result
    ["expr";"NEGATIVE";"expr"],fun (ss:obj[]) ->
            let s1 = unbox<ExcelExpr> ss.[1]
            let result:ExcelExpr =
                Negative s1
            box result
    ["arguments"],fun (ss:obj[]) ->
            let result:ExcelExpr list =
                []
            box result
    ["arguments";"expr"],fun (ss:obj[]) ->
            let s0 = unbox<ExcelExpr> ss.[0]
            let result:ExcelExpr list =
                [s0]
            box result
    ["arguments";"arguments";",";"expr"],fun (ss:obj[]) ->
            let s0 = unbox<ExcelExpr list> ss.[0]
            let s2 = unbox<ExcelExpr> ss.[2]
            let result:ExcelExpr list =
                s2::s0
            box result
|]
open FslexFsyacc.Runtime
let parser = Parser(fxRules, actions, closures)
let parse (tokens:seq<_>) =
    parser.parse(tokens, getTag, getLexeme)
    |> unbox<ExcelExpr>