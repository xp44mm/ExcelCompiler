module ExcelCompiler.ExcelParsingTable
let rules = Map [-26,["formula";"=";"expr"];-25,["expr";"expr";"^";"expr"];-24,["expr";"expr";">=";"expr"];-23,["expr";"expr";">";"expr"];-22,["expr";"expr";"=";"expr"];-21,["expr";"expr";"<>";"expr"];-20,["expr";"expr";"<=";"expr"];-19,["expr";"expr";"<";"expr"];-18,["expr";"expr";"/";"expr"];-17,["expr";"expr";"-";"expr"];-16,["expr";"expr";"+";"expr"];-15,["expr";"expr";"*";"expr"];-14,["expr";"expr";"&";"expr"];-13,["expr";"expr";"%"];-12,["expr";"TRUE"];-11,["expr";"REFERENCE"];-10,["expr";"QUOTE"];-9,["expr";"POSITIVE";"expr"];-8,["expr";"NUMBER"];-7,["expr";"NEGATIVE";"expr"];-6,["expr";"FUNCTION";"(";"arguments";")"];-5,["expr";"FALSE"];-4,["expr";"(";"expr";")"];-3,["arguments";"expr"];-2,["arguments";"arguments";",";"expr"];-1,["arguments"];0,["";"formula"]]
let actions = Map [0,Map ["=",47;"formula",1];1,Map ["",0];2,Map [")",12;",",3];3,Map ["(",6;"FALSE",9;"FUNCTION",10;"NEGATIVE",13;"NUMBER",15;"POSITIVE",16;"QUOTE",18;"REFERENCE",19;"TRUE",20;"expr",4];4,Map ["%",34;"&",35;")",-2;"*",36;"+",37;",",-2;"-",38;"/",39;"<",40;"<=",41;"<>",42;"=",43;">",44;">=",45;"^",46];5,Map ["%",34;"&",35;")",-3;"*",36;"+",37;",",-3;"-",38;"/",39;"<",40;"<=",41;"<>",42;"=",43;">",44;">=",45;"^",46];6,Map ["(",6;"FALSE",9;"FUNCTION",10;"NEGATIVE",13;"NUMBER",15;"POSITIVE",16;"QUOTE",18;"REFERENCE",19;"TRUE",20;"expr",7];7,Map ["%",34;"&",35;")",8;"*",36;"+",37;"-",38;"/",39;"<",40;"<=",41;"<>",42;"=",43;">",44;">=",45;"^",46];8,Map ["",-4;"%",-4;"&",-4;")",-4;"*",-4;"+",-4;",",-4;"-",-4;"/",-4;"<",-4;"<=",-4;"<>",-4;"=",-4;">",-4;">=",-4;"^",-4];9,Map ["",-5;"%",-5;"&",-5;")",-5;"*",-5;"+",-5;",",-5;"-",-5;"/",-5;"<",-5;"<=",-5;"<>",-5;"=",-5;">",-5;">=",-5;"^",-5];10,Map ["(",11];11,Map ["(",6;")",-1;",",-1;"FALSE",9;"FUNCTION",10;"NEGATIVE",13;"NUMBER",15;"POSITIVE",16;"QUOTE",18;"REFERENCE",19;"TRUE",20;"arguments",2;"expr",5];12,Map ["",-6;"%",-6;"&",-6;")",-6;"*",-6;"+",-6;",",-6;"-",-6;"/",-6;"<",-6;"<=",-6;"<>",-6;"=",-6;">",-6;">=",-6;"^",-6];13,Map ["(",6;"FALSE",9;"FUNCTION",10;"NEGATIVE",13;"NUMBER",15;"POSITIVE",16;"QUOTE",18;"REFERENCE",19;"TRUE",20;"expr",14];14,Map ["",-7;"%",-7;"&",-7;")",-7;"*",-7;"+",-7;",",-7;"-",-7;"/",-7;"<",-7;"<=",-7;"<>",-7;"=",-7;">",-7;">=",-7;"^",-7];15,Map ["",-8;"%",-8;"&",-8;")",-8;"*",-8;"+",-8;",",-8;"-",-8;"/",-8;"<",-8;"<=",-8;"<>",-8;"=",-8;">",-8;">=",-8;"^",-8];16,Map ["(",6;"FALSE",9;"FUNCTION",10;"NEGATIVE",13;"NUMBER",15;"POSITIVE",16;"QUOTE",18;"REFERENCE",19;"TRUE",20;"expr",17];17,Map ["",-9;"%",-9;"&",-9;")",-9;"*",-9;"+",-9;",",-9;"-",-9;"/",-9;"<",-9;"<=",-9;"<>",-9;"=",-9;">",-9;">=",-9;"^",-9];18,Map ["",-10;"%",-10;"&",-10;")",-10;"*",-10;"+",-10;",",-10;"-",-10;"/",-10;"<",-10;"<=",-10;"<>",-10;"=",-10;">",-10;">=",-10;"^",-10];19,Map ["",-11;"%",-11;"&",-11;")",-11;"*",-11;"+",-11;",",-11;"-",-11;"/",-11;"<",-11;"<=",-11;"<>",-11;"=",-11;">",-11;">=",-11;"^",-11];20,Map ["",-12;"%",-12;"&",-12;")",-12;"*",-12;"+",-12;",",-12;"-",-12;"/",-12;"<",-12;"<=",-12;"<>",-12;"=",-12;">",-12;">=",-12;"^",-12];21,Map ["",-14;"%",34;"&",-14;")",-14;"*",36;"+",37;",",-14;"-",38;"/",39;"<",-14;"<=",-14;"<>",-14;"=",-14;">",-14;">=",-14;"^",46];22,Map ["",-15;"%",34;"&",-15;")",-15;"*",-15;"+",-15;",",-15;"-",-15;"/",-15;"<",-15;"<=",-15;"<>",-15;"=",-15;">",-15;">=",-15;"^",46];23,Map ["",-16;"%",34;"&",-16;")",-16;"*",36;"+",-16;",",-16;"-",-16;"/",39;"<",-16;"<=",-16;"<>",-16;"=",-16;">",-16;">=",-16;"^",46];24,Map ["",-17;"%",34;"&",-17;")",-17;"*",36;"+",-17;",",-17;"-",-17;"/",39;"<",-17;"<=",-17;"<>",-17;"=",-17;">",-17;">=",-17;"^",46];25,Map ["",-18;"%",34;"&",-18;")",-18;"*",-18;"+",-18;",",-18;"-",-18;"/",-18;"<",-18;"<=",-18;"<>",-18;"=",-18;">",-18;">=",-18;"^",46];26,Map ["",-19;"%",34;"&",35;")",-19;"*",36;"+",37;",",-19;"-",38;"/",39;"^",46];27,Map ["",-20;"%",34;"&",35;")",-20;"*",36;"+",37;",",-20;"-",38;"/",39;"^",46];28,Map ["",-21;"%",34;"&",35;")",-21;"*",36;"+",37;",",-21;"-",38;"/",39;"^",46];29,Map ["",-22;"%",34;"&",35;")",-22;"*",36;"+",37;",",-22;"-",38;"/",39;"^",46];30,Map ["",-23;"%",34;"&",35;")",-23;"*",36;"+",37;",",-23;"-",38;"/",39;"^",46];31,Map ["",-24;"%",34;"&",35;")",-24;"*",36;"+",37;",",-24;"-",38;"/",39;"^",46];32,Map ["",-25;"%",34;"&",-25;")",-25;"*",-25;"+",-25;",",-25;"-",-25;"/",-25;"<",-25;"<=",-25;"<>",-25;"=",-25;">",-25;">=",-25;"^",-25];33,Map ["",-26;"%",34;"&",35;"*",36;"+",37;"-",38;"/",39;"<",40;"<=",41;"<>",42;"=",43;">",44;">=",45;"^",46];34,Map ["",-13;"%",-13;"&",-13;")",-13;"*",-13;"+",-13;",",-13;"-",-13;"/",-13;"<",-13;"<=",-13;"<>",-13;"=",-13;">",-13;">=",-13;"^",-13];35,Map ["(",6;"FALSE",9;"FUNCTION",10;"NEGATIVE",13;"NUMBER",15;"POSITIVE",16;"QUOTE",18;"REFERENCE",19;"TRUE",20;"expr",21];36,Map ["(",6;"FALSE",9;"FUNCTION",10;"NEGATIVE",13;"NUMBER",15;"POSITIVE",16;"QUOTE",18;"REFERENCE",19;"TRUE",20;"expr",22];37,Map ["(",6;"FALSE",9;"FUNCTION",10;"NEGATIVE",13;"NUMBER",15;"POSITIVE",16;"QUOTE",18;"REFERENCE",19;"TRUE",20;"expr",23];38,Map ["(",6;"FALSE",9;"FUNCTION",10;"NEGATIVE",13;"NUMBER",15;"POSITIVE",16;"QUOTE",18;"REFERENCE",19;"TRUE",20;"expr",24];39,Map ["(",6;"FALSE",9;"FUNCTION",10;"NEGATIVE",13;"NUMBER",15;"POSITIVE",16;"QUOTE",18;"REFERENCE",19;"TRUE",20;"expr",25];40,Map ["(",6;"FALSE",9;"FUNCTION",10;"NEGATIVE",13;"NUMBER",15;"POSITIVE",16;"QUOTE",18;"REFERENCE",19;"TRUE",20;"expr",26];41,Map ["(",6;"FALSE",9;"FUNCTION",10;"NEGATIVE",13;"NUMBER",15;"POSITIVE",16;"QUOTE",18;"REFERENCE",19;"TRUE",20;"expr",27];42,Map ["(",6;"FALSE",9;"FUNCTION",10;"NEGATIVE",13;"NUMBER",15;"POSITIVE",16;"QUOTE",18;"REFERENCE",19;"TRUE",20;"expr",28];43,Map ["(",6;"FALSE",9;"FUNCTION",10;"NEGATIVE",13;"NUMBER",15;"POSITIVE",16;"QUOTE",18;"REFERENCE",19;"TRUE",20;"expr",29];44,Map ["(",6;"FALSE",9;"FUNCTION",10;"NEGATIVE",13;"NUMBER",15;"POSITIVE",16;"QUOTE",18;"REFERENCE",19;"TRUE",20;"expr",30];45,Map ["(",6;"FALSE",9;"FUNCTION",10;"NEGATIVE",13;"NUMBER",15;"POSITIVE",16;"QUOTE",18;"REFERENCE",19;"TRUE",20;"expr",31];46,Map ["(",6;"FALSE",9;"FUNCTION",10;"NEGATIVE",13;"NUMBER",15;"POSITIVE",16;"QUOTE",18;"REFERENCE",19;"TRUE",20;"expr",32];47,Map ["(",6;"FALSE",9;"FUNCTION",10;"NEGATIVE",13;"NUMBER",15;"POSITIVE",16;"QUOTE",18;"REFERENCE",19;"TRUE",20;"expr",33]]
let kernelSymbols = Map [1,"formula";2,"arguments";3,",";4,"expr";5,"expr";6,"(";7,"expr";8,")";9,"FALSE";10,"FUNCTION";11,"(";12,")";13,"NEGATIVE";14,"expr";15,"NUMBER";16,"POSITIVE";17,"expr";18,"QUOTE";19,"REFERENCE";20,"TRUE";21,"expr";22,"expr";23,"expr";24,"expr";25,"expr";26,"expr";27,"expr";28,"expr";29,"expr";30,"expr";31,"expr";32,"expr";33,"expr";34,"%";35,"&";36,"*";37,"+";38,"-";39,"/";40,"<";41,"<=";42,"<>";43,"=";44,">";45,">=";46,"^";47,"="]
open FSharpCompiler.Parsing
let pconfig = ParserConfig( rules, actions, kernelSymbols )