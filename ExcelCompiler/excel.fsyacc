%{
open ExcelCompiler.ExcelExprUtils
%}
expr :
    | FUNCTION "(" arguments ")" {Func(s0, s2)}
    | REFERENCE {Reference s0}
    | NUMBER {Number s0}
    | QUOTE {Quote s0}
    | FALSE {False}
    | TRUE {True}
    | "(" expr ")" {s1}
    | expr "=" expr {Eq(s0,s2)}
    | expr "<" expr {Lt(s0,s2)}
    | expr "<=" expr {Le(s0,s2)}
    | expr ">" expr {Gt(s0,s2)}
    | expr ">=" expr {Ge(s0,s2)}
    | expr "<>" expr {Ne(s0,s2)}
    | expr "&" expr {Concat(s0,s2)}
    | expr "+" expr {Add(s0,s2)}
    | expr "-" expr {Sub(s0,s2)}
    | expr "*" expr {Mul(s0,s2)}
    | expr "/" expr {Div(s0,s2)}
    | expr "^" expr {Pow(s0,s2)}
    | expr "%" {Percent s0}
    | POSITIVE expr {Positive s1}
    | NEGATIVE expr {Negative s1}
arguments :
    | (*empty*) {[]}
    | expr {[Some s0]}
    | argument+ {
        [
            yield! fromArgumentList s0
            yield None
        ]
    }
    | ","+ {fromCommas (s0+1)}
    | ","+ expr {
        [
            yield! fromCommas s0
            yield Some s1
        ]
    }
    | argument+ expr {
        [
            yield! fromArgumentList s0
            yield Some s1
        ]
    }
    | ","+ argument+ {
        [
            yield! fromCommas s0
            yield! fromArgumentList s1
            yield None
        ]
    }
    | ","+ argument+ expr {
        [
            yield! fromCommas s0
            yield! fromArgumentList s1
            yield Some s2
        ]
    }
argument+ :
    | argument {[s0]}
    | argument+ argument {s1::s0}
argument :
    | expr ","+ {s0,s1}
","+ :
    | "," {1}
    | ","+ "," {s0 + 1}

%%

%nonassoc "<" "<=" "<>" "=" ">" ">="
%left "&"
%left "+" "-"
%left "*" "/"
%left "^"
%left "%"
%right NEGATIVE POSITIVE

%%

FUNCTION : string
NUMBER : string
QUOTE : string
REFERENCE : "string list*string list"
expr : ExcelExpr
arguments : "ExcelExpr option list"
argument+ : "list<ExcelExpr*int>"
argument : "ExcelExpr*int"
","+ : int
